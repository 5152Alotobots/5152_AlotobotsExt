name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'beta*.*.*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Parse .tool-versions
        uses: wistia/parse-tool-versions@v1.0

      - name: Set up Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODEJS_TOOL_VERSION }}

      - name: Cache node_modules
        uses: actions/cache@v2
        id: cache-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node${{ env.NODEJS_TOOL_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node${{ env.NODEJS_TOOL_VERSION }}-

      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build extension
        run: npm run build

      - name: Determine version
        id: determine_version
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          if [[ $GITHUB_REF == refs/tags/v*.*.* ]]; then
            echo "::set-output name=version::$(node -p -e "const version = require('./package.json').version.split('.'); console.log(version[0] + '.' + version[1] + '.' + (Number(version[2]) + Number('${{ github.run_number }}')));")"
          else
            echo "::set-output name=version::$(node -p -e "const version = require('./package.json').version.split('.'); console.log(version[0] + '.' + version[1] + '-beta.' + (Number(version[2]) + Number('${{ github.run_number }}')));")"
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this release:
            - Add a summary of the changes in your release
          draft: false
          prerelease: ${{ github.ref == 'refs/tags/beta*.*.*' }}

      - name: Upload extension
        uses: actions/upload-artifact@v2
        with:
          name: tt151extpack
          path: ./tt151extpack-*.vsix
          if: success()

      - name: Set output version
        id: version
        run: echo ::set-output name=version::${{ steps.determine_version.outputs.version }}

      - name: Set output asset_url
        id: asset_url
        run: echo ::set-output name=asset_url::$(jq -r '.url' ${{ steps.create_release.outputs.upload_url }}/assets)

      - name: Set output asset_id
        id: asset_id
        run: echo ::set-output name=asset_id::$(jq -r '.id' ${{ steps.create_release.outputs.upload_url }}/assets)
