name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'beta*.*.*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Parse .tool-versions
        uses: wistia/parse-tool-versions@v1.0

      - name: Set up Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODEJS_TOOL_VERSION }}

      - name: Cache node_modules
        uses: actions/cache@v2
        id: cache-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node${{ env.NODEJS_TOOL_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node${{ env.NODEJS_TOOL_VERSION }}-

      - name: Install vsce
        run: npm install -g vsce

      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build extension
        run: vsce package

      - name: Determine version
        id: determine_version
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          if [[ $GITHUB_REF == refs/tags/v*.*.* ]]; then
            echo "::set-output name=version::$(node -p -e "const version = require('./package.json').version.split('.'); console.log(version[0] + '.' + version[1] + '.' + (Number(version[2]) + Number('${{ github.run_number }}')));")"
          else
            echo "::set-output name=version::$(node -p -e "const version = require('./package.json').version.split('.'); console.log(version[0] + '.' + version[1] + '-beta.' + (Number(version[2]) + Number('${{ github.run_number }}')));")"
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            Changes in this release:
            - Add a summary of the changes in your release
          draft: false
          prerelease: ${{ github.ref == 'refs/tags/beta*.*.*' }}

      - name: Upload extension
        uses: actions/upload-artifact@v2
        with:
          name: tt151extpack
          path: ./tt151extpack-*.vsix
          if: success()

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tt151extpack-*.vsix
          asset_name: tt151extpack.vsix
          asset_content_type: application/vsix

      - name: Set output version
        id: version
        run: echo ::set-output name=version::${{ steps.determine_version.outputs.version }}

      - name: Set output asset_url
        id: asset_url
        run: echo ::set-output name=asset_url::$(jq -r '.url' ${{ steps.create_release.outputs.upload_url }}/assets)

      - name: Set output asset_id
        id: asset_id
        run: echo ::set-output name=asset_id::$(jq -r '.id' ${{ steps.create_release.outputs.upload_url }}/assets)






      # - name: Get current tag
      #   id: current_tag
      #   run: echo ::set-output name=tag::$(git describe --abbrev=0 --tags)

      # - name: Get current version
      #   id: current_version
      #   run: echo ::set-output name=version::$(node -pe "require('./package.json').version")

      # - name: Determine release type
      #   id: release_type
      #   run: |
      #     if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
      #       echo "release"
      #     elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/tags/beta*" ]]; then
      #       echo "beta"
      #     else
      #       echo "prerelease"
      #     fi
      #   env:
      #     GITHUB_REF: ${{ github.ref }}

      # - name: Update package version
      #   if: steps.release_type.outputs.release_type != 'prerelease'
      #   run: |
      #     if [[ "${{ steps.release_type.outputs.release_type }}" == "release" ]]; then
      #       npm version patch -m "Bump version to %s [skip ci]"
      #     elif [[ "${{ steps.release_type.outputs.release_type }}" == "beta" ]]; then
      #       npm version premajor --preid=beta -m "Bump version to %s [skip ci]"
      #     fi
      #   env:
      #     GITHUB_REF: ${{ github.ref }}

      # - name: Build extension
      #   run: npm run build --if-present

      # - name: Create release
      #   if: steps.release_type.outputs.release_type != 'prerelease'
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.current_version.outputs.version }}
      #     release_name: Release ${{ steps.current_version.outputs.version }}
      #     body: |
      #       $(cat Changelog)
      #     draft: false
      #     prerelease: ${{ steps.release_type.outputs.release_type == 'beta' }}

      # - name: Upload extension
      #   if: steps.release_type.outputs.release_type != 'prerelease'
      #   uses: actions/upload






      # - name: Determine version
      #   id: version
      #   run: |
      #     echo "##[set-output name=major;]$(node -p "require('./package.json').version.split('.')[0]")"
      #     echo "##[set-output name=minor;]$(node -p "require('./package.json').version.split('.')[1]")"
      #     echo "##[set-output name=micro;]$(node -p "require('./package.json').version.split('.')[2]")"
      #     echo "##[set-output name=is_prerelease;]$(echo ${{ github.ref }} | grep -q -e 'beta' && echo true || echo false)"

      # - name: Build extension
      #   run: vsce package

      # - name: Create release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: |
      #       $(cat Changelog)
      #     draft: false
      #     prerelease: ${{ steps.version.outputs.is_prerelease }}

      # - name: Upload asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./tt151extpack-*.vsix
      #     asset_name: tt151extpack-${{ github.ref }}.vsix
      #     asset_content_type: application/vsix

      # - name: Update package.json
      #   if: steps.version.outputs.is_prerelease == 'false'
      #   run: |
      #     echo "{\"version\":\"${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.$(((${{ steps.version.outputs.micro }})+1))\"}" > package.json
      #     git config user.name "GitHub Action"
      #     git config user.email "github-action@github.com"
      #     git add package.json
      #     git commit -m "Bump version to ${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.$(((${{ steps.version.outputs.micro }})+1)) for release"
      #     git push origin HEAD:${{ github.ref }}
